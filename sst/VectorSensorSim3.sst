#############################################################################
# SST script to simulate signal generated by Vector Sensor beampatterns.
#
# This script's scenario is similar to "VectorSensorSim2", except that
# a more realistic environment is used (with a downbending ray pattern),
# and generation of real (rather than complex baseband) daa.
#
#############################################################################

##### Define the source's passive emissions #####
# Consists of broadband Gaussian white noise at a level of 
# 70 dB, flat over a 2 KHz frequency band (from 2-4 KHz)
# (This is quite arbitrary.)
new sourceNoise = BroadbandNoise {
	spectrumDB = TableFunction {
	    order = 1
    	table = (
		# f     dB
 		2000    -300
		2100 	70
		3900 	70
 		4000    -300
		)
	}

    # Complex basedband output
#    isComplex = true
#    frequency = 3000     # CF
    # For real signals, do the following
    isComplex = false       # not basebanded, so don't set CF frequency
    frequency = 0

    # Noise produced "eternally"; we want receiver to hear continuously
	times = { first=-5; 
              last=2005; 
#              rate=2500 }   # 25% oversampling @ 2kHz BW
              # use the following for real signals
              rate=10000 }   # 25% oversampling for 4000 kHz

    # Interpolation order
    order = 11
}

# Store a single realization of the noise, to enable coherent signals
# between receive elements
storedNoise = SIOSignal{ file="SourceNoise.sio" }
CopySignal sourceNoise storedNoise

##### Define the Source #####
new theSource = Source {
   signal = storedNoise
   # Put it 2 km east of the origin and 10 meters down
   trajectory = { position = ( 0 2000 10 ) }
   # Assume noise is radiated omnidirectionally
   beams = (OmniBeam)
}

##### Specify a receiver. #####
# Get the receive beams first
read "VectorSensorBeams.sst"
new theReceiver = Sonar {
    beams = vectorSensorArray   # from included file
    # Begin at 5 km S, 10 meters down, moving north at 5 m/s
    trajectory = { 
        position = ( -5000 0 10 ) 
        velocity = ( 5 0 0 ) 
    }
}

##### Define the ocean environment #####
read "aplBottoms.sst"
new theOcean = Ocean {

  # Bathymetry & SSP
  depth = 200  # (m) constant
  soundspeed = TableFunction { table = 
       # Depth (m)     SS (m/s)
         ( 0.0         1492.10
           35.0        1489.97
           55.0        1485.64
           80.0        1483.32
          145.0        1479.83
          200.0        1478.06
        ) 
  }

  # Surface parameters
  windspeed = 5.1
  surface = APLSurface

  # Bottom parameters
  bottom = MuddySand
 
  # Thorp model for volume attenuation
  volumeAttenuation = ThorpAttenuation

}

##### Define the eigenray model #####

# Non-isotropic SVP: requires Cass
new theEM = CASSOnDemand {
    startfile = "$SSTHOME/input/flatEarth.cass"
    # Permit a single multipath
	maximumEigenrays = 5
	maximumSurfaceBounces = 1
	maximumBottomBounces = 1
    # Permit a single vertex
	max2waySurfaceBounces = 1
	max2wayBottomBounces = 1
    # Use single freq near center of band
    frequencies = UniformGrid{ first=30000; last=30000; number=1 }
	filterLength = 9
}

##### Describe what we want to do #####
# Create a "DirectSignal" from the source to the receiver
new result = DirectSignal {
    # Who's making the noise?
    source = theSource

    # Who's hearing the noise?
    receiver = theReceiver

    # Environment and propagation models
    ocean = theOcean
    eigenrayModel = theEM

    # Choose this to match the source spec
	isComplex = storedNoise.isComplex
    frequency = storedNoise.frequency

    # Over what timespan and rate are we listening?
    # Note that 5 m/s is 200 sec/km.  The trajectories above result in
    # a CPA of 2 km at t=1000s.  So center the first,last below at 1000
    # and extend in either direction to lengthen the total distance.
 	times = { first=600;  # 600 to 1400 is 4 km total distance
              last=1400;  
              rate=storedNoise.times.rate
            }
}

##### Generate file output #####

# Note the order of data in the files (assuming real output)
# - Column 1 = Time
# - Column 2 = Channel 1 = Element1 Omni
# - Column 3 = Channel 2 = Element1 DipoleX
# - Column 4 = Channel 3 = Element1 DipoleY
# - Column 5 = Channel 4 = Element1 DipoleZ
# - Column 6 = Channel 5 = Element2 Omni
# - Column 7 = Channel 6 = Element2 DipoleX
# - Column 8 = Channel 7 = Element2 DipoleY
# - Column 9 = Channel 8 = Element2 DipoleZ
# - Column 10 =Channel 9 =  Element3 Omni
# .......... ETC ..........

######### To Create One Giant File w/All Channels, Do This #########
# ASCII format: Optional FYI
#CopySignal result BareAsciiSignal { file="VectorSensorSignal.out" }
# SIO format: Required for Matlab display tools
#CopySignal result SIOSignal { file="VectorSensorSignal.sio" }

######### To Break Into Element-by-Element Files, Do This #########
# The correctness of this approach depends on the absence of randomness
# from this point on. That is why source.signal comes from a file
# instead of from a BroadbandNoise object. If we did the latter,
# each element would get a freshly computed noise stream, and the
# correlation between elements would be zero, which would defeat
# beam forming.

print "\n - Creating Element-1...";
result.receiver.beams = element_01
CopySignal result SIOSignal{ file="Element01.sio" }

print "\n - Creating Element-2...";
result.receiver.beams = element_02
CopySignal result SIOSignal{ file="Element02.sio" }

print "\n - Creating Element-3...";
result.receiver.beams = element_03
CopySignal result SIOSignal{ file="Element03.sio" }

print "\n - Creating Element-4...";
result.receiver.beams = element_04
CopySignal result SIOSignal{ file="Element04.sio" }

print "\n - Creating Element-5...";
result.receiver.beams = element_05
CopySignal result SIOSignal{ file="Element05.sio" }

print "\n - Creating Element-6...";
result.receiver.beams = element_06
CopySignal result SIOSignal{ file="Element06.sio" }

print "\n - Creating Element-7...";
result.receiver.beams = element_07
CopySignal result SIOSignal{ file="Element07.sio" }

print "\n - Creating Element-8...";
result.receiver.beams = element_08
CopySignal result SIOSignal{ file="Element08.sio" }

print "\n - Creating Element-9...";
result.receiver.beams = element_09
CopySignal result SIOSignal{ file="Element09.sio" }

print "\n - Creating Element-10...";
result.receiver.beams = element_10
CopySignal result SIOSignal{ file="Element10.sio" }

print "\n - Creating Element-11...";
result.receiver.beams = element_11
CopySignal result SIOSignal{ file="Element11.sio" }

print "\n - Creating Element-12...";
result.receiver.beams = element_12
CopySignal result SIOSignal{ file="Element12.sio" }

print "\n - Creating Element-13...";
result.receiver.beams = element_13
CopySignal result SIOSignal{ file="Element13.sio" }

print "\n - Creating Element-14...";
result.receiver.beams = element_14
CopySignal result SIOSignal{ file="Element14.sio" }

print "\n - Creating Element-15...";
result.receiver.beams = element_15
CopySignal result SIOSignal{ file="Element15.sio" }

print "\n - Creating Element-16...";
result.receiver.beams = element_16
CopySignal result SIOSignal{ file="Element16.sio" }

print "\n - Creating Element-17...";
result.receiver.beams = element_17
CopySignal result SIOSignal{ file="Element17.sio" }

print "\n - Creating Element-18...";
result.receiver.beams = element_18
CopySignal result SIOSignal{ file="Element18.sio" }

print "\n - Creating Element-19...";
result.receiver.beams = element_19
CopySignal result SIOSignal{ file="Element19.sio" }

print "\n - Creating Element-20...";
result.receiver.beams = element_20
CopySignal result SIOSignal{ file="Element20.sio" }

print "\n - Creating Element-21...";
result.receiver.beams = element_21
CopySignal result SIOSignal{ file="Element21.sio" }

print "\n - Creating Element-22...";
result.receiver.beams = element_22
CopySignal result SIOSignal{ file="Element22.sio" }

print "\n - Creating Element-23...";
result.receiver.beams = element_23
CopySignal result SIOSignal{ file="Element23.sio" }

print "\n - Creating Element-24...";
result.receiver.beams = element_24
CopySignal result SIOSignal{ file="Element24.sio" }

print "\n ***  All Elements Created *** \n";
