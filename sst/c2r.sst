# c2r.sst: Resample a complex signal to make equivalent real signal
# $Id: c2r.sst 4951 2006-12-29 00:59:57Z rpg $

##   Summary:
#	The intent of this example is to help users choose the value of the
# interpolation order, to achieve a balance between accuracy and performance.
#	This example starts with a narrowband signal consisting of a set of
# 7 tones at 200-Hz intervals from 4400 to 5600 Hz, in "complex envelope"
# representation using a center frequency of 5 kHz and a sampling rate of
# 1500 Hz -- 25% oversampled.  It uses ResampleSignal to interpolate it to
# the CD rate of 44100 Hz and convert it to real samples.  The result is
# compared to a "standard" that consists of the same 7 tones computed
# originally as real samples at the CD rate.
#	This is very similar to input/certifyCRSampler.sst, but uses more
# different "order" values, a longer time interval, and produces output
# signals in SIO format for plotting instead of using CompareSignals.
# Plot them using the UNIX SIO script plotC2r.csh in this directory.

# Make the 7-tone "standard".
standard = SIOSignal {
	isComplex = false
	times = { first = 0; last = 1.0; rate = 44100 }
	file = "c2r_std.sio"
}

harfam = HarmonicFamily:{
	isComplex = false
	times = standard.times
	order = 0
	fundamental = 200	# Hz
	harmonics = (
	#  number   ampDB    phaseDeg
		22       0.0       0.0
		23       0.0       0.0
		24       0.0       0.0
		25       0.0       0.0
		26       0.0       0.0
		27       0.0       0.0
		28       0.0       0.0
	)
}
CopySignal harfam standard

# The test input signal is the same harmonic family, but sampled at
# only 1500 Hz -- 25% oversampled.
testin = SIOSignal {
	frequency = 5000
	times = { first = -0.1; last = 1.1; rate = 1500 }
	file = "c2r_in.sio"
}
harfam {
	isComplex = true
	frequency = testin.frequency
	times = testin.times
}
CopySignal harfam testin

# Test the resampling for orders 0 to 10
new resampler = ResampleSignal {
	isComplex = false
	times = standard.times
	inSignal = testin
}
new testout = SIOSignal {
	isComplex = false
	times = standard.times
	file = "out10.sio"
}


echoInput = true

resampler.inSignal.order = 0
testout = SIOSignal { file = "c2r_00.sio" }
CopySignal resampler testout

resampler.inSignal.order = 1
testout.file = "c2r_01.sio"
CopySignal resampler testout

resampler.inSignal.order = 2
testout.file = "c2r_02.sio"
CopySignal resampler testout

resampler.inSignal.order = 3
testout.file = "c2r_03.sio"
CopySignal resampler testout

resampler.inSignal.order = 4
testout.file = "c2r_04.sio"
CopySignal resampler testout

resampler.inSignal.order = 5
testout.file = "c2r_05.sio"
CopySignal resampler testout

resampler.inSignal.order = 7
testout.file = "c2r_07.sio"
CopySignal resampler testout

resampler.inSignal.order = 9
testout.file = "c2r_09.sio"
CopySignal resampler testout

resampler.inSignal.order = 11
testout.file = "c2r_11.sio"
CopySignal resampler testout

resampler.inSignal.order = 13
testout.file = "c2r_13.sio"
CopySignal resampler testout
