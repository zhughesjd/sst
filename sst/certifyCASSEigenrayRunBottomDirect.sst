# certifyCASSBottomDirect: Test DirectSignal with the cassBottom option of CASSEigenrayRun

# $Id: certifyCASSEigenrayRunBottomDirect.sst 6048 2009-07-09 19:53:59Z kwiley $

#traceEigenrayModel = true

print "\n***** Test scattering with a GriddedBoundary & a cass bottom "

read "jacksonBottoms.sst"

new sandyGravelLocale = 
       BoundaryLocale { x = 600; y = 0.0; boundary = SandyGravel }

new clayLocale = 
       BoundaryLocale { x = 0.0; y = 0.0; boundary = Clay }

pulse = ModulatedTone {
        frequency = 30000
        order = 0
        times = {       # One sample extending from 0 to 10 ms
                first = 0.005
                interval = 0.01
                number = 1
        }
        level = 200             # dB // uPa^2 m^2
 }

######   Ocean Environment Specification ######

new ocean = Ocean {
 
        depth = 500.0   # constant (meters)

        # Surface is isotropic
        surface = Boundary {
                totalForwardStrength = ConstantDbFunction2 { decibels = -3.0 }
                backStrength = ConstantDbFunction2 { decibels = -40 }
        }
       
        bottom  = GriddedBoundary {
                     boundaryList = BoundaryLocaleList (
                         sandyGravelLocale, clayLocale)
                  } 

        # One volume reverb layer from 700-900 meters
        volume = ReverbList (
                ReverbLayer {
                        minDepth = 700          # m
                        maxDepth = 900          # m
                        strengthDB = -50.0      # dB // m^-1
                }
        )
        soundspeed = 1500       # m/s
        # Volume attenuation:  Use zero if you wish to compare reverb with an
        # analytic expression that is ignorant of attenuation.
        volumeAttenuation = ThorpAttenuation
}

new source1 = Source {
	beams  = ( OmniBeam )
	signal = pulse
	trajectory = Trajectory (  	
	     {
		time = 0.0                         # s
		position = ( 0.0 0.0 60.0 )        # m
	}
   )
}

new receiver1 = Sonar {
	beams = ( OmniBeam )
	trajectory = Trajectory (  	
	     {
		time = 0.0                         # s
		position = ( 540.0 0.0 60.0 )        # m
	}
   )
}

eigenrayModel1 = CASSEigenrayRun {
        startfile = "$SSTHOME/input/flatEarth.cass"
        scenario = "Passive"
        ocean = ocean
	    cassBottom = SandyGravel
        maximumSurfaceBounces = 0
        maximumBottomBounces = 1
        maximumEigenrays = 20
        filterLength = 9
        verticalAngles = UniformGrid{ first=-89; last=89; interval=0.1 }
        receiverTrajectory = receiver1.trajectory
        sourceTrajectory = source1.trajectory
        ranges = UniformGrid { first = 10; 
                               last = 700; 
                               interval = 10 }
        frequencies = UniformGrid{ first=28000; last=32000; number=3 }
        rangeReference = 1
        sourceBearingAngles = UniformGrid{ first=0; last=0; number=1 }
        receiverBearingAngles = UniformGrid{ first=0; last=0; number=1 }
        maximumEigenraysPerSignature = 2
}


directGenerator1 = DirectSignal {
    eigenrayModel = eigenrayModel1
	times = {
		first = 0.68
		last = 0.70
		rate = 4000
	}
	frequency = 30000
	source = source1
    receiver = receiver1
}

new cassBottomDirect_1 = BareAsciiSignal { file = "cassBottomDirect_1.txt" }
CopySignal directGenerator1 cassBottomDirect_1
CompareSignals {
	  signal = cassBottomDirect_1
      standard = BareAsciiSignal {
		file = "$SSTHOME/standard/cassBottomDirect_1.txt"
      }
      message = "certifyCassBottomDirect, first test"
}

new source2 = Source {
	beams  = ( OmniBeam )
	signal = pulse
	trajectory = Trajectory (  	
	     {
		time = 0.0                         # s
		position = ( 60.0 0.0 60.0 )        # m
	}
   )
}

new receiver2 = Sonar {
	beams = (OmniBeam)
	trajectory = Trajectory (  	
	     {
		time = 0.0                         # s
		position = ( 600.0 0.0 60.0 )        # m
	}
   )
}

eigenrayModel2 = eigenrayModel1 {
        receiverTrajectory = receiver2.trajectory
        sourceTrajectory = source2.trajectory
}

directGenerator2 = directGenerator1 {
    eigenrayModel = eigenrayModel2
	source = source2
    receiver = receiver2
}
new cassBottomDirect_2 = BareAsciiSignal { file = "cassBottomDirect_2.txt" }
CopySignal directGenerator2 cassBottomDirect_2

CompareSignals {
	  signal = cassBottomDirect_2
      standard = BareAsciiSignal {
		file = "$SSTHOME/standard/cassBottomDirect_2.txt" 
      }
      message = "certifyCassBottomDirect, second test"
}
