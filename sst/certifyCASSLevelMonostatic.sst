# certifyCASSLevelMonostatic.sst: Test reverb level using Cass eigenrays.
# Monostatic scenario.
# $Id: certifyCASSLevelMonostatic.sst 4951 2006-12-29 00:59:57Z rpg $

new source = Source {
        beams = ( OmniBeam )
        signal = ModulatedTone {
                frequency = 15000.0     # Hz
                level = 200.0           # dB // uPa^2 m^2
                times = { first = 0.05; interval = 0.1; number = 1 }
        }
        trajectory = ( { time = 0.0; position = ( 0 0 150 ) } )
}

# Receiver at transmitter (monostatic)
new receiver = Sonar {
    beams = ( OmniBeam )    
    trajectory =  source.trajectory
}

######   Ocean Environment Specification ######

new ocean = Ocean {
        # Constant ocean depth
        depth = 2000  # m

        # Surface and bottom scattering and reflection are isotropic
        surface = Boundary {
                totalForwardStrength = ConstantDbFunction2 { decibels = -3.0 }
                backStrength = ConstantDbFunction2 { decibels = -15 }
        }
        
        bottom  = Boundary {
                totalForwardStrength = ConstantDbFunction2 { decibels = -5.0 }
                backStrength = ConstantDbFunction2 { decibels = -20 }
        }
        
        # One volume reverb layer spanning the entire depth
        volume = ReverbList (
                ReverbLayer {
                        minDepth = 0            # m
                        maxDepth = 2000         # m
                        strengthDB = -30.0      # dB // m^-1
                }
        )
        soundspeed = 1500       # m/s
        volumeAttenuation = ThorpAttenuation
}

new cassEigenrayModel = CASSEigenrayModel {
        maximumEigenrays = 10
        maximumSurfaceBounces = 0
        maximumBottomBounces = 0
        max2waySurfaceBounces = 0
        max2wayBottomBounces = 0
        filterLength = 1        # Narrowband; no filtering
    	rangeReference = 1.0	# to match "RANGE REFERENCE = 1 M" in cass input
#   Monostatic - only 1 eigenray file
        receiverEigenrayFile = "RCVEIG"
        transmitterTrajectory = source.trajectory
        receiverTrajectory = source.trajectory
}

###### Simulation Parameters ######
# The output Scattering Function is recorded for 1 frequency bin.
new cassScatFunGenerator = BBBScatFun {
        eigenrayModel = cassEigenrayModel
        frequencies = UniformGrid { first = 3500; number = 1 }
        times = UniformGrid { first = 0; interval = 0.01; number = 1000 }
        dopplers = UniformGrid {
                first = 1.0
                last =  1.0
                interval = 1.0
                number = 1
        }
#        maxSamples = 4
        doVolume = true
        doSurface = true
        doBottom = true
}

# Compare scattering function to "standard"
CompareSignals {
  standard = BareAsciiSignal { file = "$SSTHOME/standard/cassScatFunMonostatic.txt" }
  signal = cassScatFunGenerator
  message = "certifyCASSLevelMonostatic"
}
