# certifyCRSampler.sst: Resample complex signal to equivalent real signal.
# $Id: certifyCRSampler.sst 4951 2006-12-29 00:59:57Z rpg $

# Make the 13-tone "standard", tones at 100-Hz intervals from 4400 to 5600 Hz.
# Input is heterodyned using a center frequency of 5 kHz, sampled at 1500 Hz.
# Output is real, sampled at the CD rate.

new standard = BareAsciiSignal {
	isComplex = false
	times = { first = 0; last = 0.2; rate = 44100 }
	file = "standard3.txt"
}

new harfam = HarmonicFamily:{
	isComplex = false
	times = standard.times
	order = 0
	fundamental = 100	# Hz
	harmonics = (
	#  number   ampDB    phaseDeg
		44       0.0       0.0
		45       0.0       0.0
		46       0.0       0.0
		47       0.0       0.0
		48       0.0       0.0
		49       0.0       0.0
		50       0.0       0.0
		51       0.0       0.0
		52       0.0       0.0
		53       0.0       0.0
		54       0.0       0.0
		55       0.0       0.0
		56       0.0       0.0
	)
}
CopySignal harfam standard

# The test input signal is the same harmonic family, but sampled at
# only 1500 Hz -- 25% oversampled.
new testin = BareAsciiSignal {
	frequency = 5000
	times = { first = -0.1; last = 0.3; rate = 1500 }
	file = "ctestin.txt"
}
harfam {
	isComplex = true
	frequency = testin.frequency
	times = testin.times
}
CopySignal harfam testin

# Test the resampling for orders 0 to 10
new resampler = ResampleSignal {
	isComplex = false
	times = standard.times
	inSignal = testin
}
new testout = BareAsciiSignal {
	isComplex = false
	times = standard.times
	file = "out10.txt"
}


# echoInput = true

resampler.inSignal.order = 0
print "\n***** Order 0 Complex to Real:"
print "*****   Expect max rel diff = 2.223, RMS ratio = 1.016"
CompareSignals {
   signal = resampler
   standard = standard
   message = "certifyCRSampler -- Order 0 Complex to Real"
   tolerance = 2.223
}

resampler.inSignal.order = 1
print "\n***** Order 1 Complex to Real:"
print "*****   Expect max rel diff = 1.048, RMS ratio = 0.849"
CompareSignals {
   signal = resampler
   standard = standard
   message = "certifyCRSampler -- Order 1 Complex to Real"
   tolerance = 1.048
}

resampler.inSignal.order = 2
print "\n***** Order 2 Complex to Real:"
print "*****   Expect max rel diff = 0.912, RMS ratio = 0.966"
CompareSignals {
   signal = resampler
   standard = standard
   message = "certifyCRSampler -- Order 2 Complex to Real"
   tolerance = 0.912
}

resampler.inSignal.order = 3
print "\n***** Order 3 Complex to Real:"
print "*****   Expect max rel diff = 0.695, RMS ratio = 0.929"
CompareSignals {
   signal = resampler
   standard = standard
   message = "certifyCRSampler -- Order 3 Complex to Real"
   tolerance = 0.695
}

resampler.inSignal.order = 9
print "\n***** Order 9 Complex to Real Cached: Expect max rel diff = 0.142, RMS ratio = 0.987"
CompareSignals {
   signal = resampler
   standard = standard
   message = "certifyCRSampler -- Order 9 Complex to Real Cached"
   tolerance = 0.142
}

resampler.samplerCacheSize = 0
resampler.inSignal.order = 9
print "\n***** Order 9 Complex to Real Uncached: Expect max rel diff = 0.143, RMS ratio = 0.987"
CompareSignals {
   signal = resampler
   standard = standard
   message = "certifyCRSampler -- Order 9 Complex to Real Uncached"
   tolerance = 0.143
}
