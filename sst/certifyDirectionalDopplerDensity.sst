# certifyDopplerDirectionalDensity.sst: 
# $Id: certifyDirectionalDopplerDensity.sst 6601 2011-04-10 23:13:58Z rpg $

# echoInput = true

random.seed = 0

# Source is omnidirectional
new source = Source {
        beams = ( OmniBeam )
        signal = ModulatedTone {
                frequency = 15000.0     # Hz
                level = 200.0           # dB // uPa^2 m^2
                times = { first = 0.05; interval = 0.1; number = 1 }
        }
# Locate transmitter: 150 meters down
        trajectory = ( { time = 0.0
                         position = ( 0 0 150 ) 
                         velocity = ( 0 0 0 ) 
                         orientation = ( 0 0 0 )
                        } 
                     )
}

# 2 Rectangular Piston Beams, with back hemisphere cut off.
# Offset to generate complex response patterns

new recPiston1 = RecPistonBeam {
                    width = 0.1
                    height = 0.1
                    axisElevation = 0
                    axisBearing = 65
                    offset = (0, 1.0, 0)
                 }
new beam1 = ProductBeam {
              inBeams = (
                recPiston1,
                ConeBeam {
                    axisElevation = recPiston1.axisElevation
                    axisBearing = recPiston1.axisBearing
                    halfAngle = 90
                }
              )
            }

new recPiston2 = RecPistonBeam {
                    width = 0.1
                    height = 0.1
                    axisElevation = 0
                    axisBearing = -65
                    offset = (0, -1.0, 0)
                 }
new beam2 = ProductBeam {
              inBeams = (
                recPiston2,
                ConeBeam {
                    axisElevation = recPiston2.axisElevation
                    axisBearing = recPiston2.axisBearing
                    halfAngle = 90
                }
              )
            }                 

# Define receive beams
new rcvbeam = BeamList ( beam1, beam2 )

# Locate receiver:  5 km due south of transmitter and moving
new receiver = Sonar {
   beams = rcvbeam
#     beams = ( OmniBeam )    
    trajectory = ( { time = 0.0
                     position = ( -5000 0 150 )
                     velocity = ( 10 5 1 )
                     orientation = ( 0 0 0 )
                   } 
    )
}

######   Ocean Environment Specification ######

new ocean = Ocean {
        depth = 1000.0   # constant (meters)
        windspeed = 0   # to turn off Doppler width
        # Surface and bottom scattering and reflection are isotropic
        surface = Boundary {
                totalForwardStrength = ConstantDbFunction2 { decibels = -3.0 }
                backStrength = ConstantDbFunction2 { decibels = -40 }
        }
  	    bottom  = Boundary {
                totalForwardStrength = ConstantDbFunction2 { decibels = -5.0 }
                backStrength = ConstantDbFunction2 { decibels = -20 }
        }
        soundspeed = 1500       # m/s
 	    # Volume parameters
	    volumeAttenuation = -7.0    	# dB/km
}

# Use the internal SST eigenray model 
new internalEigenrayModel = EigenrayModel {
        maximumEigenrays = 5
        maximumSurfaceBounces = 2
        maximumBottomBounces = 2
        filterLength = 1        # Narrowband; no filtering
}

###### Simulation Parameters ######

# Use a 1x1 (at the equator) tesselation
new tess = GriddedTesselation {
        elevationInc = 1.0
        azimuthIncEq = 1.0
	#writePower = true
	#writeResponse = true
	#powerOutFile = "DopplerPower.bin"
	#responseOutFile = "DopplerResponse.bin"
}


new generator = DirectionalDopplerDensity {
        isComplex = true
        frequencies = UniformGrid { first=3500; number=1 }
        # 1 second at 10 Hz
        scatFunTimes = UniformGrid { first=3; last=4; interval= 0.1; }
        times = UniformGrid { first=3; last=4; interval= 0.01; }
        dopplers = UniformGrid {
                first = 1.0
                last =  1.008
                number = 3
        }
        maxAngleChange = 0.5    # make small compared to beamwidth
        maxSamples = 1024       # next ^2 over (360/maxAngleChange)
        # Do surface & bottom reverb
        doVolume = false
        doSurface = true
        doBottom = true
        eigenrayModel = internalEigenrayModel
        isReproducible = true
        tesselation = tess
}

print "\n*****  DirectionalDopplerDensityTest: Multipaths, bistatic, surface & bottom, complex, correlated

new this = BareAsciiSignal { file = "dopplerdensity.txt" }
CopySignal generator this

new standard = BareAsciiSignal { file = "$SSTHOME/standard/dopplerdensity.txt" }
# The computed values aren't stable, so the tolerance must be huge.
CompareSignals {
   signal = this 
   standard = standard
   message = "certifyDirectionalDopplerDensity"
   tolerance = 0.15
}
