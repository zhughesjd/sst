# certifyEWASignal -- generate an EWA signal
# $Id: certifyEWASignal.sst 5800 2009-02-28 01:54:02Z rpg $

#echoInput = true
######   Environment Specification ######

read "isoOcean.sst"

# Specify isovelocity eigenray model parameters
eigenrayModel = EigenrayModel {
	maximumEigenrays = 1
	maximumSurfaceBounces = 0
	maximumBottomBounces = 0
	movingSourceIterations = 6	# lots
	timeTolerance = 1e-7		# stringent
	filterLength = 1	# No propagation filtering
}



# An EWA sonar

# EWA Element Positions
# Auto-Generated by Matlab EWAElementPositions.m
EWAElements = BeamList(
                   OmniBeam{ offset=(0.742951 -0.028882 -0.016675) }
                   OmniBeam{ offset=(0.742951 0.000000 0.033350) }
                   OmniBeam{ offset=(0.742951 0.028882 -0.016675) }
                   OmniBeam{ offset=(0.666751 -0.028882 -0.016675) }
                   OmniBeam{ offset=(0.666751 0.000000 0.033350) }

                   OmniBeam{ offset=(0.666751 0.028882 -0.016675) }
                   OmniBeam{ offset=(0.552451 0.000000 -0.033350) }
                   OmniBeam{ offset=(0.552451 -0.028882 0.016675) }
                   OmniBeam{ offset=(0.552451 0.028882 0.016675) }
                   OmniBeam{ offset=(0.514351 0.000000 -0.033350) }

                   OmniBeam{ offset=(0.514351 -0.028882 0.016675) }
                   OmniBeam{ offset=(0.514351 0.028882 0.016675) }
                   OmniBeam{ offset=(0.400051 0.000000 -0.033350) }
                   OmniBeam{ offset=(0.400051 -0.028882 0.016675) }
                   OmniBeam{ offset=(0.400051 0.028882 0.016675) }

                   OmniBeam{ offset=(0.285751 -0.028882 -0.016675) }
                   OmniBeam{ offset=(0.285751 0.000000 0.033350) }
                   OmniBeam{ offset=(0.285751 0.028882 -0.016675) }
                   OmniBeam{ offset=(0.209550 0.000000 -0.033350) }
                   OmniBeam{ offset=(0.209550 -0.028882 0.016675) }

                   OmniBeam{ offset=(0.209550 0.028882 0.016675) }
                   OmniBeam{ offset=(0.019050 -0.028882 -0.016675) }
                   OmniBeam{ offset=(0.019050 0.000000 0.033350) }
                   OmniBeam{ offset=(0.019050 0.028882 -0.016675) }
                   OmniBeam{ offset=(-0.019050 0.000000 -0.033350) }

                   OmniBeam{ offset=(-0.019050 -0.028882 0.016675) }
                   OmniBeam{ offset=(-0.019050 0.028882 0.016675) }
                   OmniBeam{ offset=(-0.209550 -0.028882 -0.016675) }
                   OmniBeam{ offset=(-0.209550 0.000000 0.033350) }
                   OmniBeam{ offset=(-0.209550 0.028882 -0.016675) }

                   OmniBeam{ offset=(-0.285751 0.000000 -0.033350) }
                   OmniBeam{ offset=(-0.285751 -0.028882 0.016675) }
                   OmniBeam{ offset=(-0.285751 0.028882 0.016675) }
                   OmniBeam{ offset=(-0.400051 -0.028882 -0.016675) }
                   OmniBeam{ offset=(-0.400051 0.000000 0.033350) }

                   OmniBeam{ offset=(-0.400051 0.028882 -0.016675) }
                   OmniBeam{ offset=(-0.514351 -0.028882 -0.016675) }
                   OmniBeam{ offset=(-0.514351 0.000000 0.033350) }
                   OmniBeam{ offset=(-0.514351 0.028882 -0.016675) }
                   OmniBeam{ offset=(-0.552451 -0.028882 -0.016675) }

                   OmniBeam{ offset=(-0.552451 0.000000 0.033350) }
                   OmniBeam{ offset=(-0.552451 0.028882 -0.016675) }
                   OmniBeam{ offset=(-0.666751 0.000000 -0.033350) }
                   OmniBeam{ offset=(-0.666751 -0.028882 0.016675) }
                   OmniBeam{ offset=(-0.666751 0.028882 0.016675) }

                   OmniBeam{ offset=(-0.742951 0.000000 -0.033350) }
                   OmniBeam{ offset=(-0.742951 -0.028882 0.016675) }
                   OmniBeam{ offset=(-0.742951 0.028882 0.016675) }
              )



sourceTrajectory = Trajectory (    # Only one Snapshot in this Trajectory
    {
        time = 0.0                          # s
        position = ( 0.0 100.0 120.0 )        # m
        velocity = ( 0.0 0.0 0.0 )          # m/s
        orientation = ( 0.0 0.0 0.0 )      # deg
        orientationRate = ( 0.0 0.0 0.0 )   # deg/s
    }
)

sonarTrajectory = Trajectory (    # Only one Snapshot in this Trajectory
    {
        time = 0.0                          # s
        position = ( 0.0 0.0 120.0 )        # m
        velocity = ( 0.0 0.0 0.0 )          # m/s
        orientation = ( 0.0 0.0 0.0 )      # deg
        orientationRate = ( 0.0 0.0 0.0 )   # deg/s
    }
)

source = Source {
	beams  = ( RecPistonBeam { width = 0.1; height = 0.1 } )
	trajectory = sourceTrajectory
	signal = ModulatedTone {
        isComplex = false
		frequency = 0.0
	    frequencyModulation = ConstantFunction { value = 15000 }
		level = 220
		times = { first = 0.0; last = 0.004; rate = 48000  }
		order = 1
		# Use a Hann (cosine squared) pulse centered at time 0.
		envelope = HannWindow { start = 0.0; end = 0.004 }
	}
}

receiver = Sonar {
    beams = EWAElements
    trajectory = sonarTrajectory
}

dirsig = DirectSignal {
    isComplex = false
	frequency = 0
	times = {
		first = 0.0
		last =  0.1
		rate = 48000
	}
	order = 11
}

ewaSignal = EWASignal {
	file = "ewaSignal.bin" 
	receiver = receiver
	# Ocean water is close to 0 C at any depth
	temperature = ConstantFunction { value = 1 }
}


CopySignal {
	inSignal = dirsig
	outSignal = ewaSignal 
}

# Make a bare ascii version of the ewa signal to compare with

bareAsciiSignal = BareAsciiSignal {
	 file = "bareAsciiSignal.txt" 
}

CopySignal {
	inSignal = dirsig
	outSignal = bareAsciiSignal
}

CompareSignals {
  signal = ewaSignal 
  standard = bareAsciiSignal
  message = "certifyEWASignal -- Comparing EWASignal to BareAsciiSignal version"
}
