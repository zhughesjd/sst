# certifyGaussSpect.sst: Certification test for GaussianSpectrum
# $Id: certifyGaussSpect.sst 4951 2006-12-29 00:59:57Z rpg $

### Test 1: Stationary noise with trapezoidal spectrum
# (mostly to test normalization)
random.seed = 0		# always the same

new power1 = InternalSpectrum {
	isComplex = false
    times = { first = 0 }
	frequencies = { first = 0; last = 500; number = 6 }
	isPower = true
	isCorrelated = false
	# Integral over all frequencies (+ and -) is 12,000
	# so RMS amplitude should be 109.5
	samples = ( 0  10  20  20  10  0 )
}
new factor1 = FactorSpectrum { powerSpectrum = power1 }
##new factored1 = AsciiSpectrum { file = "factored1.txt" }
##CopySignal factor1 factored1

new gaussgen1 = GaussianSpectrum {
    factoredSpectrum = factor1
    times = { first = -1; last = 1; number = 21 }	# window = 2h = 0.2 s
    frequencies = { first = 0; last = 500; number = 129 }	# nfft = 256
}
##new gauss1 = AsciiSpectrum { file = "gaussSpect1.txt" }
##CopySignal gaussgen1 gauss1

new noisegen1 = SignalFromSpectrum {
	spectrum = gaussgen1
	isComplex = false
	times = { first = -1; last = 1; rate = 1000 }
	window = MitchellMcPhersonWindow
	overlapFraction = 0.5
}
##new noise1 = BareAsciiSignal { file = "gaussNoise1r.txt" }
##CopySignal noisegen1 noise1

new analysis1 = SpectrumFromSignal {
	inSignal = noisegen1
	isPower = true
	times = { first = 0; interval = 1 }
	frequencies = { first = 50; last = 450; number = 5 }
	window = TaylorWindow
}
new anal1 = InternalSpectrum{}
CopySignal analysis1 anal1
print anal1.samples

new standard1 = InternalSpectrum {
	isPower = true
	times = analysis1.times
	frequencies = analysis1.frequencies
	samples = ( 5 15 20 15 5 )
}

print "\n***** GaussianSpectrum normalization test: ratio should be near 1 *****"
print "***** Real signal: expect max rel diff = 0.11, ratio = 1.056 *****\n"
print "*****    On Intel, expect max rel diff = 0.14, ratio = 1.046 *****\n"
CompareSignals {
   signal = anal1 
   standard = standard1
   message = "certifyGaussSpect -- GaussianSpectrum normalization test"
   tolerance =  0.14
}

#  Now do the same for a complex signal.
random.seed = 0		# start over with same sequence
noisegen1 = {
	isComplex = true
	frequency = 250
	times.rate = 500
}
CopySignal analysis1 anal1
print anal1.samples

print "\n***** Complex signal: expect max rel diff = 0.11, ratio = 1.056 *****\n"
print "*****       On Intel, expect max rel diff = 0.14, ratio = 1.046 *****\n"
CompareSignals {
   signal = anal1 
   standard = standard1
   message = "certifyGaussSpect -- Complex signal"
   tolerance = 0.14
}


### Test 2: Correlated reverberation
random.seed = 0		# start over with same sequence

# The input spectrum is the output from certifyFactorSpect.sst.
new factored = AsciiSpectrum {
    file = "$SSTHOME/standard/factSpect.txt"
	times = UniformGrid: {
		first = 0.98
		last = 1.02     # Lie a little for the sake of demonstration
		number = 2
	}
	frequencies = GeometricGrid: {
		first = 15000
        last = 15330
		number = 12
	}
    isPower = false
	isComplex = true
	isCorrelated = true
}

# The updates must be long enough for me to see the 27.5-Hz frequency
# structure of the input, so the window length must be > .036 sec.
# The bandwidth is 600 Hz; make it 1000 so we can see the zeros.
# Then NFFT >= 1/(df*dt) = 1000/27.5 = 36; next power of 2 is 64.
# Work back: df = 1/(NFFT*dt) = 1000/64 = 15.625 Hz.
# Update interval < .5/df = .032; make it .025 arbitrarily.
new gauss0 = AsciiSpectrum {
    file = "gaussSpect0.txt"
    times = UniformGrid: {
        first = 0.95
        last =  1.05
        number = 5
    }
    frequencies = UniformGrid { # This could be 14500 to 15500 w/ zeros
        first = 15000       # < lowst input f
        last =  15375       # > highest
        interval = 15.625   # 1/(NFFT*dt)
    }
    isComplex = true
    isPower = false
}

new gaussSpectGen = GaussianSpectrum {
    factoredSpectrum = factored
    times = gauss0.times
    frequencies = gauss0.frequencies
}

CopySignal gaussSpectGen gauss0

new gaussSpecStandard = gauss0 { file = "$SSTHOME/standard/gaussSpect0.txt" }

print "\n***** Test for Correlated Reverberation *****"
CompareSignals {
   signal = gauss0 
   standard = gaussSpecStandard
   message = "certifyGaussSpect -- Test for Correlated Reverberation"
}

quit	# Remove this to get extra stuff below

# The rest of this isn't really part of GaussianSpectrum certification, but
# it provides the context for the comments above about choosing the grids.
sig0 = BareAsciiSignal {
    file = "sigFromGauss0.txt"
    times = UniformGrid: {
        first = 0.95
        last =  1.05
        rate = 1000  # 15.625 Hz * NFFT=64
   }
   isComplex = true
   frequency = 15200
}
sigGen = SignalFromSpectrum {
    spectrum = gauss0
    times = sig0.times
    isComplex = sig0.isComplex
    frequency = sig0.frequency
	window = MitchellMcPhersonWindow
	overlapFraction = 0.5
}
CopySignal sigGen sig0

# Just for curiosity, look at the cross-power spectrum of the result.
pspec0 = AsciiSpectrum {
    file = "powerSpect0.txt"
}
pspecGen = SpectrumFromSignal {
    inSignal = sig0
    times = factored.times
    frequencies = factored.frequencies
    isPower = true
    isComplex = true
    isCorrelated = true
}

CopySignal pspecGen pspec0

new revsp_sur1m_trivp = AsciiSpectrum {
    file = "$SSTHOME/standard/revsp_sur1m_trivp.txt"
	isComplex = true
    times = factored.times
    frequencies = factored.frequencies
	isPower = true
	isCorrelated = true
}
print "\n***** Extra test: Power of Gaussian vs. original Spectrum *****"
print "***** Ratio should be near 1.0 *****"
print "***** Expect max rel diff = 2.4, ratio = 0.96 *****\n"
CompareSignals {
   signal = pspec0 
   standard = revsp_sur1m_trivp
   message = "certifyGaussSpect -- Extra test: Power of Gaussian vs. original Spectrum"
   tolerance = 2.4
}
