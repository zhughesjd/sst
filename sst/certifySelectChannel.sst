# certifySelectChannel.in: Certification tests for SelectChannel class
# $Id: certifySelectChannel.sst 4946 2006-12-27 22:39:17Z rpg $

print "\n ***** Testing Select Channel, Multiple Combinations: ***** \n";

## Generate multi-channel real signal ##

print "\n *** Testing Real Signals ***\n";

new s1In = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 10, 11, 12, 13,	14 )
}
new s2In = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 20, 21, 22, 23, 24 )
}
new s3In = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 30, 31, 32, 33, 34 )
}
new s4In = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 40, 41, 42, 43, 44 )
}

new sTotal = BareAsciiSignal{ file = "STotal.txt" }
CopySignal MergeSignal{ inSignals = (s1In, s2In, s3In, s4In) }  sTotal

# Generate all channel combinations

CopySignal SelectChannel{ inSignal=sTotal; channel = 1 } BareAsciiSignal{ file="S1.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (1,2) } BareAsciiSignal{ file="S12.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (1,3) } BareAsciiSignal{ file="S13.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (1,4) } BareAsciiSignal{ file="S14.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (1,2,3) } BareAsciiSignal{ file="S123.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (1,2,4) } BareAsciiSignal{ file="S124.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (1,3,4) } BareAsciiSignal{ file="S134.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (1,2,3,4) } BareAsciiSignal{ file="S1234.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = 2 } BareAsciiSignal{ file="S2.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (2,3) } BareAsciiSignal{ file="S23.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (2,4) } BareAsciiSignal{ file="S24.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (2,3,4) } BareAsciiSignal{ file="S234.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = 3 } BareAsciiSignal{ file="S3.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (3,4) } BareAsciiSignal{ file="S34.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = 4 } BareAsciiSignal{ file="S4.txt" }

# Compare to standards
new s1Std = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 10, 11, 12, 13,	14 )
}
CompareSignals { signal=BareAsciiSignal{file="S1.txt"}
                 standard = s1Std
}
new s12Std = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 10,20, 11,21, 12,22, 13,23,	14,24 )
}
CompareSignals { signal=BareAsciiSignal{file="S12.txt"}
                 standard = s12Std
}
new s13Std = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 10,30, 11,31, 12,32, 13,33,	14,34 )
}
CompareSignals { signal=BareAsciiSignal{file="S13.txt"}
                 standard = s13Std
}
new s14Std = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 10,40, 11,41, 12,42, 13,43,	14,44 )
}
CompareSignals { signal=BareAsciiSignal{file="S14.txt"}
                 standard = s14Std
}
new s123Std = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 10,20,30, 11,21,31, 12,22,32, 13,23,33, 14,24,34 )
}
CompareSignals { signal=BareAsciiSignal{file="S123.txt"}
                 standard = s123Std
}
new s124Std = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 10,20,40, 11,21,41, 12,22,42, 13,23,43, 14,24,44 )
}
CompareSignals { signal=BareAsciiSignal{file="S124.txt"}
                 standard = s124Std
}
new s1234Std = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 10,20,30,40, 11,21,31,41, 12,22,32,42, 13,23,33,43, 14,24,34,44 )
}
CompareSignals { signal=BareAsciiSignal{file="S1234.txt"}
                 standard = s1234Std
}
new s134Std = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 10,30,40, 11,31,41, 12,32,42, 13,33,43, 14,34,44 )
}
CompareSignals { signal=BareAsciiSignal{file="S134.txt"}
                 standard = s134Std
}
new s2Std = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 20, 21, 22, 23,	24 )
}
CompareSignals { signal=BareAsciiSignal{file="S2.txt"}
                 standard = s2Std
}
new s23Std = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 20,30, 21,31, 22,32, 23,33,	24,34 )
}
CompareSignals { signal=BareAsciiSignal{file="S23.txt"}
                 standard = s23Std
}
new s234Std = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 20,30,40, 21,31,41, 22,32,42, 23,33,43, 24,34,44 )
}
CompareSignals { signal=BareAsciiSignal{file="S234.txt"}
                 standard = s234Std
}
new s24Std = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 20,40, 21,41, 22,42, 23,43,	24,44 )
}
CompareSignals { signal=BareAsciiSignal{file="S24.txt"}
                 standard = s24Std
}
new s3Std = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 30, 31, 32, 33,	34 )
}
CompareSignals { signal=BareAsciiSignal{file="S3.txt"}
                 standard = s3Std
}
new s34Std = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 30,40, 31,41, 32,42, 33,43,	34,44 )
}
CompareSignals { signal=BareAsciiSignal{file="S34.txt"}
                 standard = s34Std
}
new s4Std = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 40, 41, 42, 43,	44 )
}
CompareSignals { signal=BareAsciiSignal{file="S4.txt"}
                 standard = s4Std
}

############################################################################

## Do it all again, complex ##

print "\n *** Testing Complex Signals ***\n";

s1In = InternalSignal {
    isComplex = true
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 10,10.1 , 11,11.1 , 12,12.1 , 13,13.1 ,	14,14.1 )
}
s2In = InternalSignal {
    isComplex = true
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 20,20.1 , 21,21.1 , 22,22.1 , 23,23.1 , 24,24.1 )
}
s3In = InternalSignal {
    isComplex = true
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 30,30.1 , 31,31.1 , 32,32.1 , 33,33.1 , 34,34.1 )
}
s4In = InternalSignal {
    isComplex = true
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 40,40.1 , 41,41.1 , 42,42.1 , 43,43.1 , 44,44.1 )
}

sTotal = BareAsciiSignal{ file="STotalC.txt" }
CopySignal MergeSignal{ inSignals = (s1In, s2In, s3In, s4In) }  sTotal

# Generate all combinations
CopySignal SelectChannel{ inSignal=sTotal; channel = 1 } BareAsciiSignal{ file="S1C.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (1,2) } BareAsciiSignal{ file="S12C.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (1,3) } BareAsciiSignal{ file="S13C.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (1,4) } BareAsciiSignal{ file="S14C.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (1,2,3) } BareAsciiSignal{ file="S123C.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (1,2,4) } BareAsciiSignal{ file="S124C.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (1,3,4) } BareAsciiSignal{ file="S134C.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (1,2,3,4) } BareAsciiSignal{ file="S1234C.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = 2 } BareAsciiSignal{ file="S2C.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (2,3) } BareAsciiSignal{ file="S23C.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (2,4) } BareAsciiSignal{ file="S24C.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (2,3,4) } BareAsciiSignal{ file="S234C.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = 3 } BareAsciiSignal{ file="S3C.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = (3,4) } BareAsciiSignal{ file="S34C.txt" }
CopySignal SelectChannel{ inSignal=sTotal; channel = 4 } BareAsciiSignal{ file="S4C.txt" }

# Compare to standards
new s1StdC = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 10,10.1, 11,11.1, 12,12.1, 13,13.1, 14,14.1 )
}
CompareSignals { signal=BareAsciiSignal{file="S1C.txt"}
                 standard = s1StdC
}
new s12StdC = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 10,10.1,20,20.1, 11,11.1,21,21.1, 12,12.1,22,22.1, 13,13.1,23,23.1,	14,14.1, 24,24.1 )
}
CompareSignals { signal=BareAsciiSignal{file="S12C.txt"}
                 standard = s12StdC
}
new s13StdC = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 10,10.1,30,30.1, 11,11.1,31,31.1, 12,12.1,32,32.1, 13,13.1,33,33.1, 14,14.1, 34,34.1 )
}
CompareSignals { signal=BareAsciiSignal{file="S13C.txt"}
                 standard = s13StdC
}
new s14StdC = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 10,10.1,40,40.1, 11,11.1,41,41.1, 12,12.1,42,42.1, 13,13.1,43,43.1,	14,14.1,44,44.1 )
}
CompareSignals { signal=BareAsciiSignal{file="S14C.txt"}
                 standard = s14StdC
}
new s123StdC = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 10,10.1,20,20.1,30,30.1, 11,11.1,21,21.1,31,31.1, 12,12.1,22,22.1,32,32.1, 13,13.1,23,23.1,33,33.1, 14,14.1,24,24.1,34,34.1 )
}
CompareSignals { signal=BareAsciiSignal{file="S123C.txt"}
                 standard = s123StdC
}
new s124StdC = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 10,10.1,20,20.1,40,40.1, 11,11.1,21,21.1,41,41.1, 12,12.1,22,22.1,42,42.1, 13,13.1,23,23.1,43,43.1, 14,14.1,24,24.1,44,44.1 )
}
CompareSignals { signal=BareAsciiSignal{file="S124C.txt"}
                 standard = s124StdC
}
new s1234StdC = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 10,10.1,20,20.1,30,30.1,40,40.1, 11,11.1,21,21.1,31,31.1,41,41.1, 12,12.1,22,22.1,32,32.1,42,42.1, 13,13.1,23,23.1,33,33.1,43,43.1, 14,14.1,24,24.1,34,34.1,44,44.1 )
}
CompareSignals { signal=BareAsciiSignal{file="S1234C.txt"}
                 standard = s1234StdC
}
new s134StdC = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 10,10.1,30,30.1,40,40.1, 11,11.1,31,31.1,41,41.1, 12,12.1,32,32.1,42,42.1, 13,13.1,33,33.1,43,43.1, 14,14.1,34,34.1,44,44.1 )
}
CompareSignals { signal=BareAsciiSignal{file="S134C.txt"}
                 standard = s134StdC
}
new s2StdC = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 20,20.1, 21,21.1, 22,22.1, 23,23.1,	24,24.1 )
}
CompareSignals { signal=BareAsciiSignal{file="S2C.txt"}
                 standard = s2StdC
}
new s23StdC = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 20,20.1,30,30.1, 21,21.1,31,31.1, 22,22.1,32,32.1, 23,23.1,33,33.1,	24,24.1,34,34.1 )
}
CompareSignals { signal=BareAsciiSignal{file="S23C.txt"}
                 standard = s23StdC
}
new s234StdC = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 20,20.1,30,30.1,40,40.1, 21,21.1,31,31.1,41,41.1, 22,22.1,32,32.1,42,42.1, 23,23.1,33,33.1,43,43.1, 24,24.1,34,34.1,44,44.1 )
}
CompareSignals { signal=BareAsciiSignal{file="S234C.txt"}
                 standard = s234StdC
}
new s24StdC = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 20,20.1,40,40.1, 21,21.1,41,41.1, 22,22.1,42,42.1, 23,23.1,43,43.1,	24,24.1,44,44.1 )
}
CompareSignals { signal=BareAsciiSignal{file="S24C.txt"}
                 standard = s24StdC
}
new s3StdC = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 30,30.1, 31,31.1, 32,32.1, 33,33.1,	34,34.1 )
}
CompareSignals { signal=BareAsciiSignal{file="S3C.txt"}
                 standard = s3StdC
}
new s34StdC = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 30,30.1,40,40.1, 31,31.1,41,41.1, 32,32.1,42,42.1, 33,33.1,43,43.1,	34,34.1,44,44.1 )
}
CompareSignals { signal=BareAsciiSignal{file="S34C.txt"}
                 standard = s34StdC
}
new s4StdC = InternalSignal {
    isComplex = false
    times = {
        first = 0
        last = 0.04
        interval = 0.01
    }
    buf = ( 40,40.1, 41,41.1, 42,42.1, 43,43.1,	44,44.1 )
}
CompareSignals { signal=BareAsciiSignal{file="S4C.txt"}
                 standard = s4StdC
}
