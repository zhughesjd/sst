# certifyTARMODRFDTarget.sst: Certify real frequency dependent target
# $Id: certifyTARMODRFDTarget.sst 4951 2006-12-29 00:59:57Z rpg $

# Analysis: See Mathematica notebook examples/tarmod/RResponse.nb

######   Environment Specification ######

# Simplest possible single-path environment
new ocean = Ocean {
	depth = ConstantFunction2{ value = 5000.0 }
	soundspeed = 1500		# m/s
	volumeAttenuation = 0    # dB/km
}

new eigenrayModel = EigenrayModel {
    maximumEigenrays = 1
    maximumSurfaceBounces = 0
    maximumBottomBounces = 0
	filterLength = 1	# no filtering
}

######   Sonar Specification (high frequency, complex) ######

# Monostatic sonar below the origin, target 1 m north
new sonarTrajectory = Trajectory (
    {
        time = 0.0                          # s
        position = ( 0.0 0.0 100.0 )        # m
    }
)

# The transmit signal is two clean, windowed tones, below resonance and on it
new rtone0 = ModulatedTone {
	isComplex = false
	level = 0
	times = { first = 0; last = 0.1; rate = 6000 }
	frequencyModulation = ConstantFunction:{ value = 750 }
	envelope = HannWindow { start = 0; end = 0.1 }
}
new rtone1 = ModulatedTone {
	isComplex = false
	level = 0
	times = rtone0.times
	frequencyModulation = ConstantFunction:{ value = 1500 }
	envelope = HannWindow { start = 0; end = 0.1 }
}

new rsignal = SumSignal {
	inSignals = ( rtone0, rtone1 )
}

new rsource = Source {
	beams  = ( OmniBeam )
	trajectory = sonarTrajectory
	signal = rsignal
}

new rreceiver = Sonar {
	beams  = ( OmniBeam )
	trajectory = sonarTrajectory
}

######   Target Specification (mid frequency, real)   ######

new targetTrajectory = Trajectory (
    {
        time = 0.0                          # s
        position = ( 1.0 0.0 100.0 )        # m
    }
)

# This target model has a constant amplitude of 0.5 plus a resonance
# at 1500 with amplitude 1.0 and width 750. Filter length is 31, which
# is about right (four spectrum samples between the 3-dB points).
# It also has a delay of 2.666667 ms. When combined with the propagation
# delay, the total delay is 4 ms. The input file is:
#	HIGHLIGHT
#	0 0 0 0.002666667 0 16
#	0.5 1.0 1500 750

new retarget = ExternalTarget:{
	trajectory = targetTrajectory
	command = "tarmod_test $SSTHOME/input/targetRFD.etd"
}
new rgenerator = TargetEcho {
    isComplex = false
	times = {
		first = 0.0
		last = 0.108
		rate = 6000
	}
	source = rsource
	receiver = rreceiver
	target = retarget
}

new signalRE = BareAsciiSignal { file =	"targetRE.txt" }
CopySignal rgenerator signalRE

# The standard consists of the same two tones with different amplitudes and
# delays. Both are delayed 0.004 s for the 2-m travel time + target delay.
# This delay doesn't introduce a phase shift because it's an integer
# number of cycles at both tone frequencies.
# The complex amplitudes are 1+2+1 weighted averages of the target model
# spectra, which are (1.10126,-0.21358) and (0.53313,-0.90371 ).
# The envelopes are delayed by the "group delay", which is 4 ms plus
# 2 Pi times the derivative of the response phase with respect to frequency.
new rtone0r = ModulatedTone {
    isComplex = false
	level = 0.998161	# dB = 20*log10(cabs(amp))
	startingPhase = -10.9759	# deg = atan(im(amp)/re(amp))
	times = rgenerator.times
	frequencyModulation = ConstantFunction:{ value = 750 }
	envelope = HannWindow { start = 0.00407802; end = 0.10407802 }
}
new rtone1r = ModulatedTone:{
    isComplex = false
	level = 0.417503	# dB = 20*log10(cabs(amp))
	startingPhase = -59.4623	# deg = (180/Pi)*atan(im(amp)/re(amp))
	times = rgenerator.times
	frequencyModulation = ConstantFunction:{ value = 1500 }
	envelope = HannWindow { start = 0.00421978; end = 0.10421978 }
}

new rstandard = SumSignal {
	inSignals = ( rtone0r, rtone1r )
}

##new standardRE = BareAsciiSignal { file =	"standardRE.txt" }
##CopySignal rstandard standardRE
##new standardRE0 = BareAsciiSignal { file = "standardRE0.txt" }
##CopySignal rtone0r standardRE0
##new standardRE1 = BareAsciiSignal { file = "standardRE1.txt" }
##CopySignal rtone1r standardRE1

print "\n***** Frequency Dependent Target, Real Signal:"
print "***** Expect max rel diff = 0.012"
CompareSignals {
   signal = signalRE 
   standard = rstandard
   message = "certifyTARMODRFDTarget"
   tolerance = 0.012
}
