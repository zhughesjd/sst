# certifyWEGTarget: Certify a single SST scatterer with WEG eigenrays.
# $Id: certifyWEGTarget.sst 4951 2006-12-29 00:59:57Z rpg $

# Test 1:  Directly on a tabulated eigenray point.
# Correct levels should be 200 dB - sum of dB eigenray losses.

new target = PointTarget {
	trajectory = ( { time = 0.0; position = ( 3000 0 885 ) } )
	points = ( { strengthDB = 0 } )
}

new receiver = Sonar {
	beams = ( OmniBeam )
	trajectory = ( { time = 0.0; position = ( 0 0 150 ) } )
}

new source = Source {
	beams = receiver.beams
	trajectory = ( { time = 0.0; position = ( 1500 1000 150 ) } )
	signal = ModulatedTone {
		frequency = 30000
		times = { first = 0.0125; interval = 0.025; number = 1 }
			# That's one sample extending from 0 to 0.025
		order = 0	# nearest neighbor interpolation
		level = 200
	}
}

bathy= TableFunction2: {
	order = 1
	table2 = {
		arg1 = ( -5000, 0, 5000 )
		arg2 = ( -5000, 0, 5000 )
		values = (	1000 1000 1000
				2500 2500 2500
				1000 1000 1000 )
	}
}
#print bathy

ocean = Ocean {
	depth = bathy
	volumeAttenuation = 8
	soundspeed = 1500
}

new eigenrayModel = WEGOnDemand {
	maximumEigenrays = 10
	maximumSurfaceBounces = 1
	maximumBottomBounces = 1
	filterLength = 1		# Narrowband; no filtering
	verticalAngles = UniformGrid{ first=-89.9; last=89.9; interval=0.1 }
	frequencies = UniformGrid{ first= 30000; last= 30000; number=1 }
	maximumEigenraysPerSignature = 2
	minimumRelativeStrength = -40
	printEigenrays = true
}

new signal = InternalSignal {}

# tracepropagation = true	# Un-comment for eigenray dump
new echoGenerator = TargetEcho {
	frequency = 30000
	isComplex = true
	times = { first = 4.0; last = 8.0; interval = 0.005 }
	order = 0	# nearest neighbor (no Doppler shift or beam delays)
}
CopySignal echoGenerator signal

# Copy the result to ASCII form
txtSignal = BareAsciiSignal { file = "wegTargetBistatic0.txt" }
CopySignal signal txtSignal

# Compare to pre-calculated results
CompareSignals {
	standard = BareAsciiSignal {
		file = "$SSTHOME/standard/wegTargetBistatic0.txt"
	}
	signal = BareAsciiSignal {
		file = "wegTargetBistatic0.txt"
	}
	message = "certifyWEGOnDemandTargetBistatic, test 1"
}

# simulate another target at bearing angle 90 degrees
target = PointTarget {
	trajectory = ( { time = 0.0; position = ( 0 3000 885 ) } )
	points = ( { strengthDB = 0 } )
}

new signal90 = InternalSignal {}
echoGenerator = TargetEcho {
		frequency = 30000
		isComplex = true
		times = { first = 4.0; last = 8.0; interval = 0.005 }
		order = 0	   # nearest neighbor (no Doppler shift or beam delays)
}
CopySignal echoGenerator signal90

# Copy the result to ASCII form
new txtSignal90 = BareAsciiSignal { file = "wegTargetBistatic90.txt" }
CopySignal signal90 txtSignal90

# Compare to pre-calculated results
CompareSignals {
	standard = BareAsciiSignal {
		file = "$SSTHOME/standard/wegTargetBistatic90.txt"
	}
	signal = BareAsciiSignal {
		file = "wegTargetBistatic90.txt"
	}
	# This is big because of a problem with the MinGW build. Fix it later.
	tolerance = 0.22
	message = "certifyWEGOnDemandTargetBistatic, test 2"
}
