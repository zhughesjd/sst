# genSepReverb.sst:  Generate reverberation using separated processing chain
# This is a demonstration of the equivalence of ReverbSignal and its
# equivalent separated processing chain.
# The core of this script is a copy of the "verbose" output from ReverbSignal,
# edited to do the job using three CopySignal commands to place intermediate
# results in files for plotting.
# $Id: genSepReverb.sst 5208 2008-02-04 23:02:31Z rpg $

# A high-frequency, 5-beam monostatic sonar with offset beams.
read "sonar.sst"

# Specify the ocean environment.
read "ocean.sst"

###### Simulation Parameters ######

# The Scattering function was computed in reverb.sst.
scatFunTotal = SIOScatFun { file = "scatFunTotal.sio" }

# Initialize the random number generator.  0 means standard; always the same.
random.seed = 0

# Generate ping 1
time = double:0.0
reverbSigFile = SIOSignal {
	file = "reverb_1_sep.sio"
	frequency = 10000
	times = {
		first = 0.060
		last = 3.160
		rate = 800
	}
}

# This is the ReverbSignal that generated the equivalent chain:
#reverbGenerator = ReverbSignal {
#	frequency = reverbSigFile.frequency
#	times = reverbSigFile.times
#	scatFunction = scatFunTotal
#	sourceSignal = tranPulse
#	verbose = true
#}
#CopySignal reverbGenerator reverbSigFile

new scatFunction = scatFunTotal
new sourceSignal = tranPulse

##### ReverbSignal Equivalent Processing Chain #####
# Implicit inputs: scatFunction, sourceSignal
new extendTimes = bool:false
new reverbSigTimes = UniformGrid:{
    first = 0.200; last = 5.500; rate = 800.000; number = 4241; }

# ReverbSignal Internal Grids:
new tranSpectTimes = UniformGrid:{
    first = 0.200; last = 0.200; interval = 0.40000; number = 1; }
new reverbSpectTimes = UniformGrid:{
    first = 0.300; last = 5.900; interval = 0.20000; number = 29; }
new gaussSpectTimes = UniformGrid:{
    first = 0.300; last = 5.900; interval = 0.20000; number = 29; }
new gaussSpectFreqs = UniformGrid:{
    first = 9600.000; last = 10398.438; interval = 1.56250; number = 512; }
new reverbSpectFreqs = GeometricGrid:{
    first = 9600; last = 10402.7; logRatio = 0.000213954; number = 164; }
new tranSpectFreqs = GeometricGrid:{
    first = 9320.39; last = 10402.7; logRatio = 0.000213954; number = 224; }

# ReverbSignal Processing Nodes:
new sourceSpectrum = SpectrumFromSignal:{
    inSignal = sourceSignal;
    times = tranSpectTimes;
    frequencies = tranSpectFreqs;
    isPower = true; isComplex = false; order = 1;
    overlapFraction = 0;
    window = RectangularWindow;
}
new reverbSpectGen = ReverbSpectrum:{
    scatFunction = scatFunction;
    pulseSpectrum = sourceSpectrum;
    times = reverbSpectTimes;
    frequencies = reverbSpectFreqs;
    isCorrelated = scatFunction.isCorrelated;
    order = 1; spectThreshold = 2.000e-03;
}
new reverbSpect = SIOSpectrum { file = "reverbSpectrum.sio" }
CopySignal reverbSpectGen reverbSpect

new factorSpect = FactorSpectrum:{ powerSpectrum = reverbSpect; }
new gaussSpectGen = GaussianSpectrum:{
    factoredSpectrum = factorSpect;
    times = gaussSpectTimes;
    frequencies = gaussSpectFreqs;
    order = 1;
}
new gaussSpect = SIOSpectrum { file = "gaussSpectrum.sio" }
CopySignal gaussSpectGen gaussSpect

new sigFromSpect = SignalFromSpectrum:{
    spectrum = gaussSpect;
    times = reverbSigTimes;
    frequency = 10000.0; isComplex = true;
    nfft = 512; order = 5;
    overlapFraction = 0.5;
    window = MitchellMcPhersonWindow:{ taperFraction = 0.5; }
}
##### End ReverbSignal Equivalent Processing Chain #####

CopySignal sigFromSpect reverbSigFile

print "genSepReverb.sst: Compare to ReverbSignal output from generate.sst."
print "Expect max rel diff about 1.3%"

new standard = reverbSigFile { file = "reverb_1.sio" }

CompareSignals reverbSigFile standard


