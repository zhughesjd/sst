# realVarFilter.sst: Variable FIR filter on real HarmonicFamily signal
# $Id: realVarFilter.sst 4951 2006-12-29 00:59:57Z rpg $

# echoInput = true

new sigTimes = UniformGrid:{ first = 0; last = 1; rate = 8000 }

# The test signal contains 16 equal-amplitude sines, up to 80% of Nyquist.
new rharfam = HarmonicFamily {
	isComplex = false
	times = sigTimes
	fundamental = 200
	harmonics = (
  # number	ampDB	phaseDeg
	1		0.0		-90
	2		0.0		-90
	3		0.0		-90
	4		0.0		-90
	5		0.0		-90
	6		0.0		-90
	7		0.0		-90
	8		0.0		-90
	9		0.0		-90
	10		0.0		-90
	11		0.0		-90
	12		0.0		-90
	13		0.0		-90
	14		0.0		-90
	15		0.0		-90
	16		0.0		-90
	)
}
new rharmonics = SIOSignal {
	file = "RVHarmonics.sio"
}
CopySignal rharfam rharmonics

# The spectrum is designed to produce a 1-sample delay and filter
# coefficients = 0.25, 0.5, 0.25 times the Hann window.
new spectrum1 = InternalSignal {
	isComplex = true
	order = 1
	times = { first = 0.25; last = 0.75; number = 2 }
	buf = (
# freq = 0        1000            2000            3000           4000
1.0 0.0	    0.60355 -0.60355    0.0 -0.5    -0.10355 -0.10355   0.0 0.0
2.0 0.0	    1.20711 -1.20711    0.0 -1.0    -0.20710 -0.20710   0.0 0.0
	)
}

# This filter specifier will be inherited by FIRCoefBuf objects
new firCoef = FIRCoef {
    nfft = 8		# freq. spacing is Nyquist/4
    filterLength = 7	# Should nail the specified spectrum
    rate = sigTimes.rate
	frequency = 0	# real signal
}

new coefGenerator = FIRCoefBuf { specBuf = spectrum1 }

new rfilter = VarFirFilter {
    inSignal = rharmonics
    coefBuf = coefGenerator
}

new rfiltered = SIOSignal {
	file = "RVFiltered.sio"
}

CopySignal rfilter rfiltered
